"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unstorage";
exports.ids = ["vendor-chunks/unstorage"];
exports.modules = {

/***/ "(ssr)/../node_modules/unstorage/dist/index.mjs":
/*!************************************************!*\
  !*** ../node_modules/unstorage/dist/index.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: () => (/* binding */ builtinDrivers),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   defineDriver: () => (/* binding */ defineDriver),\n/* harmony export */   joinKeys: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   normalizeBaseKey: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   normalizeKey: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   prefixStorage: () => (/* reexport safe */ _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.p),\n/* harmony export */   restoreSnapshot: () => (/* binding */ restoreSnapshot),\n/* harmony export */   snapshot: () => (/* binding */ snapshot)\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! destr */ \"(ssr)/../node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared/unstorage.8581f561.mjs */ \"(ssr)/../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs\");\n\n\n\nfunction defineDriver(factory) {\n    return factory;\n}\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(()=>{\n    const data = /* @__PURE__ */ new Map();\n    return {\n        name: DRIVER_NAME,\n        options: {},\n        hasItem (key) {\n            return data.has(key);\n        },\n        getItem (key) {\n            return data.get(key) ?? null;\n        },\n        getItemRaw (key) {\n            return data.get(key) ?? null;\n        },\n        setItem (key, value) {\n            data.set(key, value);\n        },\n        setItemRaw (key, value) {\n            data.set(key, value);\n        },\n        removeItem (key) {\n            data.delete(key);\n        },\n        getKeys () {\n            return Array.from(data.keys());\n        },\n        clear () {\n            data.clear();\n        },\n        dispose () {\n            data.clear();\n        }\n    };\n});\nfunction createStorage(options = {}) {\n    const context = {\n        mounts: {\n            \"\": options.driver || memory()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: false,\n        watchListeners: [],\n        unwatch: {}\n    };\n    const getMount = (key)=>{\n        for (const base of context.mountpoints){\n            if (key.startsWith(base)) {\n                return {\n                    base,\n                    relativeKey: key.slice(base.length),\n                    driver: context.mounts[base]\n                };\n            }\n        }\n        return {\n            base: \"\",\n            relativeKey: key,\n            driver: context.mounts[\"\"]\n        };\n    };\n    const getMounts = (base, includeParent)=>{\n        return context.mountpoints.filter((mountpoint)=>mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint)=>({\n                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n                mountpoint,\n                driver: context.mounts[mountpoint]\n            }));\n    };\n    const onChange = (event, key)=>{\n        if (!context.watching) {\n            return;\n        }\n        key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n        for (const listener of context.watchListeners){\n            listener(event, key);\n        }\n    };\n    const startWatch = async ()=>{\n        if (context.watching) {\n            return;\n        }\n        context.watching = true;\n        for(const mountpoint in context.mounts){\n            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);\n        }\n    };\n    const stopWatch = async ()=>{\n        if (!context.watching) {\n            return;\n        }\n        for(const mountpoint in context.unwatch){\n            await context.unwatch[mountpoint]();\n        }\n        context.unwatch = {};\n        context.watching = false;\n    };\n    const runBatch = (items, commonOptions, cb)=>{\n        const batches = /* @__PURE__ */ new Map();\n        const getBatch = (mount)=>{\n            let batch = batches.get(mount.base);\n            if (!batch) {\n                batch = {\n                    driver: mount.driver,\n                    base: mount.base,\n                    items: []\n                };\n                batches.set(mount.base, batch);\n            }\n            return batch;\n        };\n        for (const item of items){\n            const isStringItem = typeof item === \"string\";\n            const key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(isStringItem ? item : item.key);\n            const value = isStringItem ? void 0 : item.value;\n            const options2 = isStringItem || !item.options ? commonOptions : {\n                ...commonOptions,\n                ...item.options\n            };\n            const mount = getMount(key);\n            getBatch(mount).items.push({\n                key,\n                value,\n                relativeKey: mount.relativeKey,\n                options: options2\n            });\n        }\n        return Promise.all([\n            ...batches.values()\n        ].map((batch)=>cb(batch))).then((r)=>r.flat());\n    };\n    const storage = {\n        // Item\n        hasItem (key, opts = {}) {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.hasItem, relativeKey, opts);\n        },\n        getItem (key, opts = {}) {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value));\n        },\n        getItems (items, commonOptions) {\n            return runBatch(items, commonOptions, (batch)=>{\n                if (batch.driver.getItems) {\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            options: item.options\n                        })), commonOptions).then((r)=>r.map((item)=>({\n                                key: (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.j)(batch.base, item.key),\n                                value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item.value)\n                            })));\n                }\n                return Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.getItem, item.relativeKey, item.options).then((value)=>({\n                            key: item.key,\n                            value: (0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)\n                        }));\n                }));\n            });\n        },\n        getItemRaw (key, opts = {}) {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.getItemRaw) {\n                return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItemRaw, relativeKey, opts);\n            }\n            return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(value));\n        },\n        async setItem (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key);\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.setItem) {\n                return;\n            }\n            await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(value), opts);\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async setItems (items, commonOptions) {\n            await runBatch(items, commonOptions, async (batch)=>{\n                if (batch.driver.setItems) {\n                    await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            value: (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value),\n                            options: item.options\n                        })), commonOptions);\n                }\n                if (!batch.driver.setItem) {\n                    return;\n                }\n                await Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(batch.driver.setItem, item.relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.s)(item.value), item.options);\n                }));\n            });\n        },\n        async setItemRaw (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key, opts);\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.setItemRaw) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItemRaw, relativeKey, value, opts);\n            } else if (driver.setItem) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.c)(value), opts);\n            } else {\n                return;\n            }\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async removeItem (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    removeMeta: opts\n                };\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.removeItem) {\n                return;\n            }\n            await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey, opts);\n            if (opts.removeMeta || opts.removeMata) {\n                await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.removeItem, relativeKey + \"$\", opts);\n            }\n            if (!driver.watch) {\n                onChange(\"remove\", key);\n            }\n        },\n        // Meta\n        async getMeta (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    nativeOnly: opts\n                };\n            }\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            const meta = /* @__PURE__ */ Object.create(null);\n            if (driver.getMeta) {\n                Object.assign(meta, await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getMeta, relativeKey, opts));\n            }\n            if (!opts.nativeOnly) {\n                const value = await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.getItem, relativeKey + \"$\", opts).then((value_)=>(0,destr__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value_));\n                if (value && typeof value === \"object\") {\n                    if (typeof value.atime === \"string\") {\n                        value.atime = new Date(value.atime);\n                    }\n                    if (typeof value.mtime === \"string\") {\n                        value.mtime = new Date(value.mtime);\n                    }\n                    Object.assign(meta, value);\n                }\n            }\n            return meta;\n        },\n        setMeta (key, value, opts = {}) {\n            return this.setItem(key + \"$\", value, opts);\n        },\n        removeMeta (key, opts = {}) {\n            return this.removeItem(key + \"$\", opts);\n        },\n        // Keys\n        async getKeys (base, opts = {}) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            const mounts = getMounts(base, true);\n            let maskedMounts = [];\n            const allKeys = [];\n            for (const mount of mounts){\n                const rawKeys = await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(mount.driver.getKeys, mount.relativeBase, opts);\n                const keys = rawKeys.map((key)=>mount.mountpoint + (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key)).filter((key)=>!maskedMounts.some((p)=>key.startsWith(p)));\n                allKeys.push(...keys);\n                maskedMounts = [\n                    mount.mountpoint,\n                    ...maskedMounts.filter((p)=>!p.startsWith(mount.mountpoint))\n                ];\n            }\n            return base ? allKeys.filter((key)=>key.startsWith(base) && !key.endsWith(\"$\")) : allKeys.filter((key)=>!key.endsWith(\"$\"));\n        },\n        // Utils\n        async clear (base, opts = {}) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            await Promise.all(getMounts(base, false).map(async (m)=>{\n                if (m.driver.clear) {\n                    return (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(m.driver.clear, m.relativeBase, opts);\n                }\n                if (m.driver.removeItem) {\n                    const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n                    return Promise.all(keys.map((key)=>m.driver.removeItem(key, opts)));\n                }\n            }));\n        },\n        async dispose () {\n            await Promise.all(Object.values(context.mounts).map((driver)=>dispose(driver)));\n        },\n        async watch (callback) {\n            await startWatch();\n            context.watchListeners.push(callback);\n            return async ()=>{\n                context.watchListeners = context.watchListeners.filter((listener)=>listener !== callback);\n                if (context.watchListeners.length === 0) {\n                    await stopWatch();\n                }\n            };\n        },\n        async unwatch () {\n            context.watchListeners = [];\n            await stopWatch();\n        },\n        // Mount\n        mount (base, driver) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (base && context.mounts[base]) {\n                throw new Error(`already mounted at ${base}`);\n            }\n            if (base) {\n                context.mountpoints.push(base);\n                context.mountpoints.sort((a, b)=>b.length - a.length);\n            }\n            context.mounts[base] = driver;\n            if (context.watching) {\n                Promise.resolve(watch(driver, onChange, base)).then((unwatcher)=>{\n                    context.unwatch[base] = unwatcher;\n                }).catch(console.error);\n            }\n            return storage;\n        },\n        async unmount (base, _dispose = true) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n            if (!base || !context.mounts[base]) {\n                return;\n            }\n            if (context.watching && base in context.unwatch) {\n                context.unwatch[base]();\n                delete context.unwatch[base];\n            }\n            if (_dispose) {\n                await dispose(context.mounts[base]);\n            }\n            context.mountpoints = context.mountpoints.filter((key)=>key !== base);\n            delete context.mounts[base];\n        },\n        getMount (key = \"\") {\n            key = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(key) + \":\";\n            const m = getMount(key);\n            return {\n                driver: m.driver,\n                base: m.base\n            };\n        },\n        getMounts (base = \"\", opts = {}) {\n            base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(base);\n            const mounts = getMounts(base, opts.parents);\n            return mounts.map((m)=>({\n                    driver: m.driver,\n                    base: m.mountpoint\n                }));\n        }\n    };\n    return storage;\n}\nasync function snapshot(storage, base) {\n    base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    const keys = await storage.getKeys(base);\n    const snapshot2 = {};\n    await Promise.all(keys.map(async (key)=>{\n        snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    }));\n    return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2, base = \"\") {\n    base = (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.n)(base);\n    await Promise.all(Object.entries(snapshot2).map((e)=>driver.setItem(base + e[0], e[1])));\n}\nfunction watch(driver, onChange, base) {\n    return driver.watch ? driver.watch((event, key)=>onChange(event, base + key)) : ()=>{};\n}\nasync function dispose(driver) {\n    if (typeof driver.dispose === \"function\") {\n        await (0,_shared_unstorage_8581f561_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(driver.dispose);\n    }\n}\nconst builtinDrivers = {\n    azureAppConfiguration: \"unstorage/drivers/azure-app-configuration\",\n    azureCosmos: \"unstorage/drivers/azure-cosmos\",\n    azureKeyVault: \"unstorage/drivers/azure-key-vault\",\n    azureStorageBlob: \"unstorage/drivers/azure-storage-blob\",\n    azureStorageTable: \"unstorage/drivers/azure-storage-table\",\n    cloudflareKVBinding: \"unstorage/drivers/cloudflare-kv-binding\",\n    cloudflareKVHTTP: \"unstorage/drivers/cloudflare-kv-http\",\n    cloudflareR2Binding: \"unstorage/drivers/cloudflare-r2-binding\",\n    fs: \"unstorage/drivers/fs\",\n    fsLite: \"unstorage/drivers/fs-lite\",\n    github: \"unstorage/drivers/github\",\n    http: \"unstorage/drivers/http\",\n    indexedb: \"unstorage/drivers/indexedb\",\n    localStorage: \"unstorage/drivers/localstorage\",\n    lruCache: \"unstorage/drivers/lru-cache\",\n    memory: \"unstorage/drivers/memory\",\n    mongodb: \"unstorage/drivers/mongodb\",\n    netlifyBlobs: \"unstorage/drivers/netlify-blobs\",\n    overlay: \"unstorage/drivers/overlay\",\n    planetscale: \"unstorage/drivers/planetscale\",\n    redis: \"unstorage/drivers/redis\",\n    sessionStorage: \"unstorage/drivers/session-storage\",\n    vercelKV: \"unstorage/drivers/vercel-kv\",\n    /** @deprecated */ \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    /** @deprecated */ \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/unstorage/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs":
/*!********************************************************************!*\
  !*** ../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ normalizeKey),\n/* harmony export */   b: () => (/* binding */ asyncCall),\n/* harmony export */   c: () => (/* binding */ serializeRaw),\n/* harmony export */   d: () => (/* binding */ deserializeRaw),\n/* harmony export */   j: () => (/* binding */ joinKeys),\n/* harmony export */   n: () => (/* binding */ normalizeBaseKey),\n/* harmony export */   p: () => (/* binding */ prefixStorage),\n/* harmony export */   s: () => (/* binding */ stringify)\n/* harmony export */ });\nfunction wrapToPromise(value) {\n    if (!value || typeof value.then !== \"function\") {\n        return Promise.resolve(value);\n    }\n    return value;\n}\nfunction asyncCall(function_, ...arguments_) {\n    try {\n        return wrapToPromise(function_(...arguments_));\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\nfunction isPrimitive(value) {\n    const type = typeof value;\n    return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n    const proto = Object.getPrototypeOf(value);\n    return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n    if (isPrimitive(value)) {\n        return String(value);\n    }\n    if (isPureObject(value) || Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nfunction checkBufferSupport() {\n    if (typeof Buffer === void 0) {\n        throw new TypeError(\"[unstorage] Buffer is not supported!\");\n    }\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    checkBufferSupport();\n    const base64 = Buffer.from(value).toString(\"base64\");\n    return BASE64_PREFIX + base64;\n}\nfunction deserializeRaw(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (!value.startsWith(BASE64_PREFIX)) {\n        return value;\n    }\n    checkBufferSupport();\n    return Buffer.from(value.slice(BASE64_PREFIX.length), \"base64\");\n}\nconst storageKeyProperties = [\n    \"hasItem\",\n    \"getItem\",\n    \"getItemRaw\",\n    \"setItem\",\n    \"setItemRaw\",\n    \"removeItem\",\n    \"getMeta\",\n    \"setMeta\",\n    \"removeMeta\",\n    \"getKeys\",\n    \"clear\",\n    \"mount\",\n    \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n    base = normalizeBaseKey(base);\n    if (!base) {\n        return storage;\n    }\n    const nsStorage = {\n        ...storage\n    };\n    for (const property of storageKeyProperties){\n        nsStorage[property] = (key = \"\", ...args)=>// @ts-ignore\n            storage[property](base + key, ...args);\n    }\n    nsStorage.getKeys = (key = \"\", ...arguments_)=>storage.getKeys(base + key, ...arguments_).then((keys)=>keys.map((key2)=>key2.slice(base.length)));\n    return nsStorage;\n}\nfunction normalizeKey(key) {\n    if (!key) {\n        return \"\";\n    }\n    return key.split(\"?\")[0].replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\");\n}\nfunction joinKeys(...keys) {\n    return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n    base = normalizeKey(base);\n    return base ? base + \":\" : \"\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3Vuc3RvcmFnZS9kaXN0L3NoYXJlZC91bnN0b3JhZ2UuODU4MWY1NjEubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEsU0FBU0EsY0FBY0MsS0FBSztJQUMxQixJQUFJLENBQUNBLFNBQVMsT0FBT0EsTUFBTUMsSUFBSSxLQUFLLFlBQVk7UUFDOUMsT0FBT0MsUUFBUUMsT0FBTyxDQUFDSDtJQUN6QjtJQUNBLE9BQU9BO0FBQ1Q7QUFDQSxTQUFTSSxVQUFVQyxTQUFTLEVBQUUsR0FBR0MsVUFBVTtJQUN6QyxJQUFJO1FBQ0YsT0FBT1AsY0FBY00sYUFBYUM7SUFDcEMsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsT0FBT0wsUUFBUU0sTUFBTSxDQUFDRDtJQUN4QjtBQUNGO0FBQ0EsU0FBU0UsWUFBWVQsS0FBSztJQUN4QixNQUFNVSxPQUFPLE9BQU9WO0lBQ3BCLE9BQU9BLFVBQVUsUUFBUVUsU0FBUyxZQUFZQSxTQUFTO0FBQ3pEO0FBQ0EsU0FBU0MsYUFBYVgsS0FBSztJQUN6QixNQUFNWSxRQUFRQyxPQUFPQyxjQUFjLENBQUNkO0lBQ3BDLE9BQU8sQ0FBQ1ksU0FBU0EsTUFBTUcsYUFBYSxDQUFDRjtBQUN2QztBQUNBLFNBQVNHLFVBQVVoQixLQUFLO0lBQ3RCLElBQUlTLFlBQVlULFFBQVE7UUFDdEIsT0FBT2lCLE9BQU9qQjtJQUNoQjtJQUNBLElBQUlXLGFBQWFYLFVBQVVrQixNQUFNQyxPQUFPLENBQUNuQixRQUFRO1FBQy9DLE9BQU9vQixLQUFLSixTQUFTLENBQUNoQjtJQUN4QjtJQUNBLElBQUksT0FBT0EsTUFBTXFCLE1BQU0sS0FBSyxZQUFZO1FBQ3RDLE9BQU9MLFVBQVVoQixNQUFNcUIsTUFBTTtJQUMvQjtJQUNBLE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUNBLFNBQVNDO0lBQ1AsSUFBSSxPQUFPQyxXQUFXLEtBQUssR0FBRztRQUM1QixNQUFNLElBQUlDLFVBQVU7SUFDdEI7QUFDRjtBQUNBLE1BQU1DLGdCQUFnQjtBQUN0QixTQUFTQyxhQUFhM0IsS0FBSztJQUN6QixJQUFJLE9BQU9BLFVBQVUsVUFBVTtRQUM3QixPQUFPQTtJQUNUO0lBQ0F1QjtJQUNBLE1BQU1LLFNBQVNKLE9BQU9LLElBQUksQ0FBQzdCLE9BQU84QixRQUFRLENBQUM7SUFDM0MsT0FBT0osZ0JBQWdCRTtBQUN6QjtBQUNBLFNBQVNHLGVBQWUvQixLQUFLO0lBQzNCLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzdCLE9BQU9BO0lBQ1Q7SUFDQSxJQUFJLENBQUNBLE1BQU1nQyxVQUFVLENBQUNOLGdCQUFnQjtRQUNwQyxPQUFPMUI7SUFDVDtJQUNBdUI7SUFDQSxPQUFPQyxPQUFPSyxJQUFJLENBQUM3QixNQUFNaUMsS0FBSyxDQUFDUCxjQUFjUSxNQUFNLEdBQUc7QUFDeEQ7QUFFQSxNQUFNQyx1QkFBdUI7SUFDM0I7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQUNELFNBQVNDLGNBQWNDLE9BQU8sRUFBRUMsSUFBSTtJQUNsQ0EsT0FBT0MsaUJBQWlCRDtJQUN4QixJQUFJLENBQUNBLE1BQU07UUFDVCxPQUFPRDtJQUNUO0lBQ0EsTUFBTUcsWUFBWTtRQUFFLEdBQUdILE9BQU87SUFBQztJQUMvQixLQUFLLE1BQU1JLFlBQVlOLHFCQUFzQjtRQUMzQ0ssU0FBUyxDQUFDQyxTQUFTLEdBQUcsQ0FBQ0MsTUFBTSxFQUFFLEVBQUUsR0FBR0MsT0FDbEMsYUFBYTtZQUNiTixPQUFPLENBQUNJLFNBQVMsQ0FBQ0gsT0FBT0ksUUFBUUM7SUFFckM7SUFDQUgsVUFBVUksT0FBTyxHQUFHLENBQUNGLE1BQU0sRUFBRSxFQUFFLEdBQUdwQyxhQUFlK0IsUUFBUU8sT0FBTyxDQUFDTixPQUFPSSxRQUFRcEMsWUFBWUwsSUFBSSxDQUFDLENBQUM0QyxPQUFTQSxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsT0FBU0EsS0FBS2QsS0FBSyxDQUFDSyxLQUFLSixNQUFNO0lBQ3BKLE9BQU9NO0FBQ1Q7QUFDQSxTQUFTUSxhQUFhTixHQUFHO0lBQ3ZCLElBQUksQ0FBQ0EsS0FBSztRQUNSLE9BQU87SUFDVDtJQUNBLE9BQU9BLElBQUlPLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDQyxPQUFPLENBQUMsVUFBVSxLQUFLQSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsVUFBVTtBQUN4RjtBQUNBLFNBQVNDLFNBQVMsR0FBR04sSUFBSTtJQUN2QixPQUFPRyxhQUFhSCxLQUFLTyxJQUFJLENBQUM7QUFDaEM7QUFDQSxTQUFTYixpQkFBaUJELElBQUk7SUFDNUJBLE9BQU9VLGFBQWFWO0lBQ3BCLE9BQU9BLE9BQU9BLE9BQU8sTUFBTTtBQUM3QjtBQUUrSiIsInNvdXJjZXMiOlsid2VicGFjazovL3JhaW5ib3draXQvLi4vbm9kZV9tb2R1bGVzL3Vuc3RvcmFnZS9kaXN0L3NoYXJlZC91bnN0b3JhZ2UuODU4MWY1NjEubWpzPzgwMzciXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd3JhcFRvUHJvbWlzZSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZS50aGVuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBhc3luY0NhbGwoZnVuY3Rpb25fLCAuLi5hcmd1bWVudHNfKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdyYXBUb1Byb21pc2UoZnVuY3Rpb25fKC4uLmFyZ3VtZW50c18pKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICBjb25zdCB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlICE9PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1B1cmVPYmplY3QodmFsdWUpIHtcbiAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICByZXR1cm4gIXByb3RvIHx8IHByb3RvLmlzUHJvdG90eXBlT2YoT2JqZWN0KTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSkge1xuICBpZiAoaXNQcmltaXRpdmUodmFsdWUpKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH1cbiAgaWYgKGlzUHVyZU9iamVjdCh2YWx1ZSkgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KHZhbHVlLnRvSlNPTigpKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJbdW5zdG9yYWdlXSBDYW5ub3Qgc3RyaW5naWZ5IHZhbHVlIVwiKTtcbn1cbmZ1bmN0aW9uIGNoZWNrQnVmZmVyU3VwcG9ydCgpIHtcbiAgaWYgKHR5cGVvZiBCdWZmZXIgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJbdW5zdG9yYWdlXSBCdWZmZXIgaXMgbm90IHN1cHBvcnRlZCFcIik7XG4gIH1cbn1cbmNvbnN0IEJBU0U2NF9QUkVGSVggPSBcImJhc2U2NDpcIjtcbmZ1bmN0aW9uIHNlcmlhbGl6ZVJhdyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNoZWNrQnVmZmVyU3VwcG9ydCgpO1xuICBjb25zdCBiYXNlNjQgPSBCdWZmZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gIHJldHVybiBCQVNFNjRfUFJFRklYICsgYmFzZTY0O1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVSYXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoIXZhbHVlLnN0YXJ0c1dpdGgoQkFTRTY0X1BSRUZJWCkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY2hlY2tCdWZmZXJTdXBwb3J0KCk7XG4gIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZS5zbGljZShCQVNFNjRfUFJFRklYLmxlbmd0aCksIFwiYmFzZTY0XCIpO1xufVxuXG5jb25zdCBzdG9yYWdlS2V5UHJvcGVydGllcyA9IFtcbiAgXCJoYXNJdGVtXCIsXG4gIFwiZ2V0SXRlbVwiLFxuICBcImdldEl0ZW1SYXdcIixcbiAgXCJzZXRJdGVtXCIsXG4gIFwic2V0SXRlbVJhd1wiLFxuICBcInJlbW92ZUl0ZW1cIixcbiAgXCJnZXRNZXRhXCIsXG4gIFwic2V0TWV0YVwiLFxuICBcInJlbW92ZU1ldGFcIixcbiAgXCJnZXRLZXlzXCIsXG4gIFwiY2xlYXJcIixcbiAgXCJtb3VudFwiLFxuICBcInVubW91bnRcIlxuXTtcbmZ1bmN0aW9uIHByZWZpeFN0b3JhZ2Uoc3RvcmFnZSwgYmFzZSkge1xuICBiYXNlID0gbm9ybWFsaXplQmFzZUtleShiYXNlKTtcbiAgaWYgKCFiYXNlKSB7XG4gICAgcmV0dXJuIHN0b3JhZ2U7XG4gIH1cbiAgY29uc3QgbnNTdG9yYWdlID0geyAuLi5zdG9yYWdlIH07XG4gIGZvciAoY29uc3QgcHJvcGVydHkgb2Ygc3RvcmFnZUtleVByb3BlcnRpZXMpIHtcbiAgICBuc1N0b3JhZ2VbcHJvcGVydHldID0gKGtleSA9IFwiXCIsIC4uLmFyZ3MpID0+IChcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHN0b3JhZ2VbcHJvcGVydHldKGJhc2UgKyBrZXksIC4uLmFyZ3MpXG4gICAgKTtcbiAgfVxuICBuc1N0b3JhZ2UuZ2V0S2V5cyA9IChrZXkgPSBcIlwiLCAuLi5hcmd1bWVudHNfKSA9PiBzdG9yYWdlLmdldEtleXMoYmFzZSArIGtleSwgLi4uYXJndW1lbnRzXykudGhlbigoa2V5cykgPT4ga2V5cy5tYXAoKGtleTIpID0+IGtleTIuc2xpY2UoYmFzZS5sZW5ndGgpKSk7XG4gIHJldHVybiBuc1N0b3JhZ2U7XG59XG5mdW5jdGlvbiBub3JtYWxpemVLZXkoa2V5KSB7XG4gIGlmICgha2V5KSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgcmV0dXJuIGtleS5zcGxpdChcIj9cIilbMF0ucmVwbGFjZSgvWy9cXFxcXS9nLCBcIjpcIikucmVwbGFjZSgvOisvZywgXCI6XCIpLnJlcGxhY2UoL146fDokL2csIFwiXCIpO1xufVxuZnVuY3Rpb24gam9pbktleXMoLi4ua2V5cykge1xuICByZXR1cm4gbm9ybWFsaXplS2V5KGtleXMuam9pbihcIjpcIikpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZUtleShiYXNlKSB7XG4gIGJhc2UgPSBub3JtYWxpemVLZXkoYmFzZSk7XG4gIHJldHVybiBiYXNlID8gYmFzZSArIFwiOlwiIDogXCJcIjtcbn1cblxuZXhwb3J0IHsgbm9ybWFsaXplS2V5IGFzIGEsIGFzeW5jQ2FsbCBhcyBiLCBzZXJpYWxpemVSYXcgYXMgYywgZGVzZXJpYWxpemVSYXcgYXMgZCwgam9pbktleXMgYXMgaiwgbm9ybWFsaXplQmFzZUtleSBhcyBuLCBwcmVmaXhTdG9yYWdlIGFzIHAsIHN0cmluZ2lmeSBhcyBzIH07XG4iXSwibmFtZXMiOlsid3JhcFRvUHJvbWlzZSIsInZhbHVlIiwidGhlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiYXN5bmNDYWxsIiwiZnVuY3Rpb25fIiwiYXJndW1lbnRzXyIsImVycm9yIiwicmVqZWN0IiwiaXNQcmltaXRpdmUiLCJ0eXBlIiwiaXNQdXJlT2JqZWN0IiwicHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImlzUHJvdG90eXBlT2YiLCJzdHJpbmdpZnkiLCJTdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJKU09OIiwidG9KU09OIiwiRXJyb3IiLCJjaGVja0J1ZmZlclN1cHBvcnQiLCJCdWZmZXIiLCJUeXBlRXJyb3IiLCJCQVNFNjRfUFJFRklYIiwic2VyaWFsaXplUmF3IiwiYmFzZTY0IiwiZnJvbSIsInRvU3RyaW5nIiwiZGVzZXJpYWxpemVSYXciLCJzdGFydHNXaXRoIiwic2xpY2UiLCJsZW5ndGgiLCJzdG9yYWdlS2V5UHJvcGVydGllcyIsInByZWZpeFN0b3JhZ2UiLCJzdG9yYWdlIiwiYmFzZSIsIm5vcm1hbGl6ZUJhc2VLZXkiLCJuc1N0b3JhZ2UiLCJwcm9wZXJ0eSIsImtleSIsImFyZ3MiLCJnZXRLZXlzIiwia2V5cyIsIm1hcCIsImtleTIiLCJub3JtYWxpemVLZXkiLCJzcGxpdCIsInJlcGxhY2UiLCJqb2luS2V5cyIsImpvaW4iLCJhIiwiYiIsImMiLCJkIiwiaiIsIm4iLCJwIiwicyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/unstorage/dist/shared/unstorage.8581f561.mjs\n");

/***/ })

};
;